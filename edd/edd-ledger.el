(defun edd/ledger-clean-vancity (month)
  "Clean an entry pasted from Vancity website
   MONTH is the numeric month e.g. \"02\" for February."
  (save-excursion
    (next-line)
    (delete-indentation)
    (end-of-line)
    (let ((beg (point)))
      (search-forward-regexp "-?\\$")
      (delete-region (match-beginning 0) beg))
    (search-forward "$")
    (goto-char (match-beginning 0))
    (backward-char)
    (kill-line)
    (beginning-of-line)
    (insert "2017-" month "-")
    (forward-char 2)
    (let ((beg (point)))
      (search-forward "	")
      (delete-region (point) beg))
    (insert " ")
    (move-beginning-of-line nil)
    (let ((beg (point)))
      (end-of-line)
      (capitalize-region (point) beg))))

(defun edd/ledger-clean-visa ()
  "Clean an entry pasted from Vancity VISA site"
  (save-excursion
   (beginning-of-line)
   (delete-char 1)
   (forward-sexp)
   (backward-word)
   (transpose-words 1)
   (backward-word 2)
   (transpose-words 2)
   (kill-word 3)
   (just-one-space)
   (let ((beg (point)))
     (end-of-line)
     (perform-replace "	$" " -$" nil nil nil nil nil beg (point)))
   (beginning-of-line)
   (let ((beg (point)))
     (end-of-line)
     (perform-replace "	 	 $" " $" nil nil nil nil nil beg (point)))
   (let ((beg (point)))
     (end-of-line)
     (capitalize-region (point) beg))))


(defun edd/ledger-line-to-entry (acct)
  (search-forward-regexp "-?\\$")
  (goto-char (match-beginning 0))
  (newline)
  (ledger-magic-tab)
  (insert acct "  ")
  (end-of-line)
  (newline)
  (ledger-magic-tab)
  (insert "???")
  (let ((end (point)))
    (newline)
    (backward-paragraph)
    (indent-region (point) end)
    (forward-word 3)
    (kill-word 1))
  (forward-paragraph)
  (next-line))

(defun edd/ledger-next-unknown ()
  (interactive)
  (search-forward "???")
  (back-to-indentation)
  (kill-line))

(provide 'edd-ledger)
